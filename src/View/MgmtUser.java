/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.SQLite;
import Model.User;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author beepxD
 */
public class MgmtUser extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    private User currentUser;
    
    public MgmtUser(SQLite sqlite) {
        initComponents();
        this.sqlite = sqlite;
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));
        
//        UNCOMMENT TO DISABLE BUTTONS
//        editBtn.setVisible(false);
//        deleteBtn.setVisible(false);
//        lockBtn.setVisible(false);
//        chgpassBtn.setVisible(false);
    }
    
    public void init(){
        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
//      LOAD CONTENTS
        ArrayList<User> users = sqlite.getUsers();
        for(int nCtr = 0; nCtr < users.size(); nCtr++){
            tableModel.addRow(new Object[]{
                users.get(nCtr).getUsername(), 
                users.get(nCtr).getPassword(), 
                users.get(nCtr).getRole(), 
                users.get(nCtr).getLocked()});
        }
    }
    
    public void init(User currentUser){
        this.currentUser = currentUser;
        init();
    }

    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        editRoleBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        lockBtn = new javax.swing.JButton();
        chgpassBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Username", "Password", "Role", "Locked"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(160);
            table.getColumnModel().getColumn(1).setPreferredWidth(400);
            table.getColumnModel().getColumn(2).setPreferredWidth(100);
            table.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        editRoleBtn.setBackground(new java.awt.Color(255, 255, 255));
        editRoleBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editRoleBtn.setText("EDIT ROLE");
        editRoleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoleBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        lockBtn.setBackground(new java.awt.Color(255, 255, 255));
        lockBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lockBtn.setText("LOCK/UNLOCK");
        lockBtn.setToolTipText("");
        lockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockBtnActionPerformed(evt);
            }
        });

        chgpassBtn.setBackground(new java.awt.Color(255, 255, 255));
        chgpassBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chgpassBtn.setText("CHANGE PASS");
        chgpassBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chgpassBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editRoleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(lockBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(chgpassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chgpassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editRoleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editRoleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoleBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            String username = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
            
            // Check if user is trying to edit themselves
            if(currentUser != null && username.equals(currentUser.getUsername())){
                JOptionPane.showMessageDialog(
                    this,
                    "You cannot edit your own role",
                    "Forbidden Action",
                    JOptionPane.WARNING_MESSAGE
                );
                return;
            }
            
            String[] options = {"DISABLED","CLIENT","STAFF","MANAGER","ADMIN"};
            
            String currentRole = tableModel.getValueAt(table.getSelectedRow(), 2).toString();
            int currentIndex = 0;
            for (int i = 0; i < options.length; i++) {
                if (options[i].equals(currentRole)) {
                    currentIndex = i;
                    break;
                }
            }
            
            String result = (String) JOptionPane.showInputDialog(null, 
                "USER: " + username, 
                "EDIT USER ROLE", 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                options, 
                options[currentIndex]);
            
            if(result != null){
                // Update the user's role
                try {
                    // Get the user from database
                    User user = sqlite.getUserByUsername(username);
                    if (user != null) {
                        // Update role
                        Model.Role newRole = Model.Role.valueOf(result);
                        
                        // Log the change
                        String timestamp = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());
                        sqlite.addLogs("ROLE_CHANGE", currentUser.getUsername(), "Changed user " + username + " role from " + user.getRole() + " to " + newRole, timestamp);
                        
                        // Update user in database
                        sqlite.updateUserRole(username, newRole);
                        
                        // Refresh table
                        init();
                        
                        JOptionPane.showMessageDialog(
                            this,
                            "User role updated successfully",
                            "Success",
                            JOptionPane.INFORMATION_MESSAGE
                        );
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error updating user role: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
    }//GEN-LAST:event_editRoleBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            String username = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
            
            // Check if user is trying to delete themselves
            if(currentUser != null && username.equals(currentUser.getUsername())){
                JOptionPane.showMessageDialog(
                    this,
                    "You cannot delete your own account",
                    "Forbidden Action",
                    JOptionPane.WARNING_MESSAGE
                );
                return;
            }
            
            int result = JOptionPane.showConfirmDialog(
                null, 
                "Are you sure you want to delete " + username + "?", 
                "DELETE USER", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
            );
            
            if (result == JOptionPane.YES_OPTION) {
                try {
                    // Log the deletion
                    String timestamp = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());
                    sqlite.addLogs("USER_DELETE", currentUser.getUsername(), "Deleted user: " + username, timestamp);
                    
                    // Delete the user
                    sqlite.removeUser(username);
                    
                    // Refresh table
                    init();
                    
                    JOptionPane.showMessageDialog(
                        this,
                        "User deleted successfully",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error deleting user: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void lockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            String username = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
            
            // Check if user is trying to lock themselves
            if(currentUser != null && username.equals(currentUser.getUsername())){
                JOptionPane.showMessageDialog(
                    this,
                    "You cannot lock your own account",
                    "Forbidden Action",
                    JOptionPane.WARNING_MESSAGE
                );
                return;
            }
            
            boolean isLocked = Boolean.parseBoolean(tableModel.getValueAt(table.getSelectedRow(), 3).toString());
            
            String action = isLocked ? "unlock" : "lock";
            
            int result = JOptionPane.showConfirmDialog(
                null, 
                "Are you sure you want to " + action + " " + username + "?", 
                action.toUpperCase() + " USER", 
                JOptionPane.YES_NO_OPTION
            );
            
            if (result == JOptionPane.YES_OPTION) {
                try {
                    // Log the action
                    String timestamp = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());
                    
                    if (isLocked) {
                        // Unlock user
                        sqlite.unlockAccount(username);
                        sqlite.addLogs("USER_UNLOCK", currentUser.getUsername(), "Unlocked user account: " + username, timestamp);
                    } else {
                        // Lock user
                        sqlite.lockAccount(username);
                        sqlite.addLogs("USER_LOCK", currentUser.getUsername(), "Locked user account: " + username, timestamp);
                    }
                    
                    // Refresh table
                    init();
                    
                    JOptionPane.showMessageDialog(
                        this,
                        "User account " + action + "ed successfully",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error " + action + "ing user account: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
    }//GEN-LAST:event_lockBtnActionPerformed

    private void chgpassBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chgpassBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            String username = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
            
            JPasswordField passwordField = new JPasswordField();
            JPasswordField confirmPasswordField = new JPasswordField();
            
            designer(passwordField, "NEW PASSWORD");
            designer(confirmPasswordField, "CONFIRM PASSWORD");
            
            Object[] message = {
                "Change password for user: " + username,
                passwordField,
                confirmPasswordField
            };

            int result = JOptionPane.showConfirmDialog(
                null, 
                message, 
                "CHANGE PASSWORD", 
                JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.PLAIN_MESSAGE
            );
            
            if (result == JOptionPane.OK_OPTION) {
                String password = new String(passwordField.getPassword());
                String confirmPassword = new String(confirmPasswordField.getPassword());
                
                // Validate passwords
                if (password.isEmpty()) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Password cannot be empty",
                        "Validation Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
                
                if (!password.equals(confirmPassword)) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Passwords do not match",
                        "Validation Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
                
                // Check password complexity
                if (password.length() < 8) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Password must be at least 8 characters long",
                        "Validation Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
                
                boolean hasLetter = false;
                boolean hasDigit = false;
                
                for (char c : password.toCharArray()) {
                    if (Character.isLetter(c)) {
                        hasLetter = true;
                    } else if (Character.isDigit(c)) {
                        hasDigit = true;
                    }
                    
                    if (hasLetter && hasDigit) {
                        break;
                    }
                }
                
                if (!hasLetter || !hasDigit) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Password must contain both letters and numbers",
                        "Validation Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
                
                try {
                    // Update password
                    sqlite.updatePassword(username, password);
                    
                    // Log the action
                    String timestamp = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());
                    sqlite.addLogs("PASSWORD_CHANGE", currentUser.getUsername(), "Changed password for user: " + username, timestamp);
                    
                    // Show success message
                    JOptionPane.showMessageDialog(
                        this,
                        "Password changed successfully",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error changing password: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
    }//GEN-LAST:event_chgpassBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chgpassBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editRoleBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lockBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
